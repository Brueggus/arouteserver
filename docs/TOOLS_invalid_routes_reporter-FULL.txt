How it works
++++++++++++

1. The script uses an user configurable regular espression pattern to determine if the routes it receives carry the expected reject reason BGP community, then it extracts the reason code from them.
   
   Example:

   - pattern ``^65520:(\d+)$``
   - route tagged with ``65520:7``
   - resulting reason code: ``7`` (that means "Invalid ASN in AS_PATH")

   The list of codes and their meaning is reported within :ref:`Reject policy and invalid routes tracking`.

2. Then it performs a lookup on a list of *networks* in search of 1) the left-most ASN in the AS_PATH attribute and 2) the IP address used in the NEXT_HOP attribute.
   The result of this lookup identifies the *recipients* of the alert that will be generated.

   Example of the networks list:

   .. code-block:: json

      {
        "AS1": {
          "neighbors": ["192.0.2.11", "2001:db8:1:1::11", "192.0.2.12", "2001:db8:1:1::12"]
        },
        "AS2": {
          "neighbors": ["192.0.2.21", "2001:db8:1:1::21"]
        },
        "AS3": {
          "neighbors": ["192.0.2.31", "2001:db8:1:1::31"]
        },
        "AS23" : {
          "neighbors": ["192.0.2.23"]
        }
      }

3. The invalid routes collected by the script are added to a buffer for each involved network; finally, the script triggers some actions on the basis of the *alerters* that have been configured. It can send an email or simply log the route on a file.

Usage
+++++

The script must be executed as an ExaBGP process and configured to receive JSON parsed update messages.
The first mandatory argument is the path to the *networks* configuration file; then, one or more *alerter* configuration files must be supplied.
The default regular espression pattern used to determine reject BGP communities value is ``^65520:(\d+)$``: to set it the ``--reject-reason-pattern`` option can be used. For more options run ``./invalid_routes_reporter.py --help``. 

An ExaBGP configuration example follows:

.. code::

   neighbor 192.0.2.2 {
           router-id 192.0.2.99;
           local-address 192.0.2.99;
           local-as 65534;
           peer-as 999;
           group-updates false;
           add-path receive;
   
           family {
                   ipv4 unicast;
                   ipv6 unicast;
           }
   
           process invalid_routes_reporter {
                   run /etc/exabgp/invalid_routes_reporter.py /etc/exabgp/networks.json /etc/exabgp/log.alerter.json /etc/exabgp/email.alerter.json
                   encoder json;
                   receive {
                           update;
                           parsed;
                   }
           }
   }

Configuration
+++++++++++++

.. note::

   The configuration files used by this script can be automatically generated starting from the ``clients.yml`` file used by ARouteServer to build configurations for the route server. This topic is further expanded in the rest of the document.

Details about the configuration of this script follow. An example can be found within the `tools/invalid_routes_reporter/example <https://github.com/pierky/arouteserver/tree/master/tools/invalid_routes_reporter/example>`_ directory on GitHub.

Networks configuration file
~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is a JSON file containing the list of ASNs and their peers IP addresses.

.. code-block:: javascript

   {
     "AS1": {
       "neighbors": ["192.0.2.11", "2001:db8:1:1::11", "192.0.2.12", "2001:db8:1:1::12"]
     },
     ...
   }

Alerter configuration file
~~~~~~~~~~~~~~~~~~~~~~~~~~

Alerters are also configured using JSON files.
There are more kinds of *alerters* that implement different actions, but they share a common set of configuration options:

.. code-block:: javascript

   {
     "type": "ALERTER_TYPE",

     // The following settings are ment to be interpreted on a
     // recipient-by-recipient basis. General values can be configured
     // here and they are inherited by recipients, but each
     // recipient can also be configured with its own values.

     // Optional.
     // Do not perform any action if the last one has been performed
     // less than "min_wait" seconds ago.
     "min_wait": 300,

     // Optional.
     // It is the max number of routes that will be buffered for each
     // recipient.
     // When this buffer is full, perform the action implemented by
     // the alerter, unless the "min_wait" timer has not expired.
     // If the "min_wait" timer is not expired, any further route
     // will not be buffered and will be lost.
     "max_routes": 30,

     // Optional.
     // Even if the number of buffered routes is less than "max_routes",
     // perform the action if the last one has been performed more than
     // "max_wait" seconds ago.
     "max_wait": 900,
     
     "recipients": {

       // Recipient ID must be given in the format "AS<n>" and must
       // match the ASN reported in the networks configuration file.
       "recipient ID": {
         // Optional.
         // Recipients inherit settings from the general configuration
         // above, or they may have their own settings.
         //"max_routes": 30,
         //"max_wait": 900,
         //"min_wait": 300,

         // Optional.
         // The "info" section is used by specific alerters; its
         // content depends on the alerters needs.
         "info": {
         }
       },

       // Optional.
       // The wildcard recipient ID "*" matches for any route that is
       // processed by the script.
       "*": {
       }
     }
   }

Depending on the value of ``ALERTER_TYPE``, the following *alerters* can be configured:

- ``log``: invalid routes are logged into a file.

  The following configuration options are used for this kind of *alerter*.

  .. code-block:: javascript

     {
       "type": "log",

       "path": "path to the log file",

       // Optional.
       // If True, routes will be appended to the log file, otherwise
       // the log file will be overwritten every time the process is
       // started.
       "append": False,

       // Optional.
       // This is the template used to make the lines that will be
       // logged.
       // Available macros:
       // - id: the recipient ID
       // - ts: the timestamp the route is received by the script
       // - prefix, next_hop, as_path: route's attributes
       // - reject_reason_code: the code of the reason for which the
       //   route has been considered as invalid by the route server
       // - reject_reason: the description of the reject_reason_code
       "template": "{id},{ts},{prefix},{as_path},{next_hop},{reject_reason_code},{reject_reason}"
     }

- ``email``: an email is sent to the recipients previously identified during the lookup.

  The following configuration options are used for this kind of *alerter*.

  .. code-block:: javascript

     {
       "type": "email",
 
       "host": "smtp server address",

       // Optional.
       "port": 25,

       "from_addr": "noc@acme-ix.net",

       // Optional.
       "subject": "Bad routes received!",

       // Path to a file that contains the template that will be used
       // to build the body of the email message.
       // Available macros:
       // - id: the recipient ID
       // - from_addr: the "from_addr" option
       // - subject: the "subject" option
       // - routes_list: the list of routes that have been buffered,
       //   in the following format:
       //   prefix:      xxx
       //    - AS_PATH:  xxx
       //    - NEXT_HOP: xxx
       //    - reject reason: xxx
       "template_file": "path to the template file used for the body",

       // Optional.
       "username": "SMTP username",
       "password": "SMTP password",

       "recipients": {
         "recipient ID": {
           "info": {
             // Email addresses used to send messages to this
             // recipient.
             "email": ["email1", "email2"]
           }
         }
       }
     }

Automatically generating configs from ARouteServer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``build_networks_config_from_arouteserver.py`` script can be used to automatically build *networks* and *alerters* configuration files starting from the ``clients.yml`` file used by ARouteServer.

Email addresses needed by the ``email`` *alerter* can be also automatically gathered from PeeringDB.

The usage of this script is pretty straightforward: please use the ``--help`` for details about the arguments it needs.

Examples:

.. code-block:: console

   $ ./build_networks_config_from_arouteserver.py examples/rich/clients.yml
   {
     "AS10745": {
       "neighbors": [
         "192.0.2.22",
         "2001:db:1:1::22"
       ]
     },
     "AS3333": {
       "neighbors": [
         "192.0.2.11"
       ]
     }
   }

.. code-block:: console
   
   $ ./build_networks_config_from_arouteserver.py examples/rich/clients.yml \
   >     --networks ~/invalid_routes_collector/networks.json \
   >     --email ~/invalid_routes_collector/email.alerter.json \
   >     --fetch-email-from-peeringdb
   Fetching contacts from PeeringDB: AS10745...
   Fetching contacts from PeeringDB: AS3333...
   $ cat ~/invalid_routes_collector/email.alerter.json
   {
     "host": "smtp_server_address",
     "type": "email",
     "recipients": {
       "AS10745": {
         "info": {
           "email": [
             "ganderson@arin.net"
           ]
         }
       },
       "AS3333": {
         "info": {
           "email": []
         }
       }
     },
     "template_file": "/etc/exabgp/template",
     "from_addr": "noc@acme-ix.net"
   }
