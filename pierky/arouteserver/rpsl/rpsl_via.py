#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class RPSLViaBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=True,
        namechars='',
        **kwargs
    ):
        super(RPSLViaBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class RPSLViaParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=True,
        left_recursion=True,
        parseinfo=False,
        keywords=None,
        namechars='',
        buffer_class=RPSLViaBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(RPSLViaParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _afi_(self):  # noqa
        self._token('afi')
        self._afi_list_()
        self.name_last_node('@')

    @tatsumasu()
    def _afi_list_(self):  # noqa

        def block0():
            with self._choice():
                with self._option():
                    self._token('ipv4.unicast')
                with self._option():
                    self._token('ipv4')
                with self._option():
                    self._token('ipv6.unicast')
                with self._option():
                    self._token('ipv6')
                with self._option():
                    self._token('any.unicast')
                with self._option():
                    self._token('any')
                self._error('no available options')
        self._positive_closure(block0)

    @tatsumasu()
    def _regex_ASN_(self):  # noqa
        self._pattern(r'AS[0-9]{1,10}')

    @tatsumasu()
    def _regex_AS_SET_(self):  # noqa
        self._pattern(r'(AS[0-9]{1,10}\:)?(AS-|as-)[a-zA-Z0-9:-]+')

    @tatsumasu()
    def _asn_(self):  # noqa
        self._regex_ASN_()

    @tatsumasu()
    def _as_set_(self):  # noqa
        self._regex_AS_SET_()

    @tatsumasu()
    def _peering_(self):  # noqa
        with self._choice():
            with self._option():
                self._as_set_()
            with self._option():
                self._asn_()
            self._error('no available options')

    @tatsumasu()
    def _filter_(self):  # noqa
        with self._choice():
            with self._option():
                self._as_set_()
            with self._option():
                self._asn_()
            with self._option():
                self._token('ANY')
            with self._option():
                self._token('NOT ANY')
            self._error('no available options')

    @tatsumasu()
    def _regex_ipv4_addr_(self):  # noqa
        self._pattern(r'[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')

    @tatsumasu()
    def _regex_ipv6_addr_(self):  # noqa
        self._pattern(r'[0-9a-f\:]+:[0-9a-f\:]?')

    @tatsumasu()
    def _ipv4_addr_(self):  # noqa
        self._regex_ipv4_addr_()

    @tatsumasu()
    def _ipv6_addr_(self):  # noqa
        self._regex_ipv6_addr_()

    @tatsumasu()
    def _start_(self):  # noqa
        with self._choice():
            with self._option():
                self._attr_import_via_()
            with self._option():
                self._attr_export_via_()
                self._check_eof()
            self._error('no available options')

    @tatsumasu()
    def _attr_import_via_(self):  # noqa
        self._token('import-via:')
        self.name_last_node('action')
        with self._optional():
            self._afi_()
        self.name_last_node('afi')

        def block3():
            self._rule_import_()
        self._positive_closure(block3)
        self.name_last_node('rules')
        self._token('accept')

        def block5():
            self._filter_()
        self._positive_closure(block5)
        self.name_last_node('accept')
        with self._optional():
            self._token(';')
        self.ast._define(
            ['accept', 'action', 'afi', 'rules'],
            []
        )

    @tatsumasu()
    def _attr_export_via_(self):  # noqa
        self._token('export-via:')
        self.name_last_node('action')
        with self._optional():
            self._afi_()
        self.name_last_node('afi')

        def block3():
            self._rule_export_()
        self._positive_closure(block3)
        self.name_last_node('rules')
        self._token('announce')

        def block5():
            self._filter_()
        self._positive_closure(block5)
        self.name_last_node('announce')
        with self._optional():
            self._token(';')
        self.ast._define(
            ['action', 'afi', 'announce', 'rules'],
            []
        )

    @tatsumasu()
    def _rule_import_(self):  # noqa
        self._via_()
        self.name_last_node('via')
        self._import_peers_()
        self.name_last_node('peers')
        self.ast._define(
            ['peers', 'via'],
            []
        )

    @tatsumasu()
    def _rule_export_(self):  # noqa
        self._via_()
        self.name_last_node('via')
        self._export_peers_()
        self.name_last_node('peers')
        self.ast._define(
            ['peers', 'via'],
            []
        )

    @tatsumasu()
    def _via_(self):  # noqa
        self._peering_()
        self.name_last_node('intermediate_as')
        with self._optional():
            self._routers_()
        self.name_last_node('router')
        self.ast._define(
            ['intermediate_as', 'router'],
            []
        )

    @tatsumasu()
    def _import_peers_(self):  # noqa

        def block0():
            self._token('from')
            self._peering_selection_()
            self.name_last_node('from_peer')
            with self._optional():
                self._token('action')
                self._action_list_()
                self.add_last_node_to_name('actions')
        self._positive_closure(block0)
        self.ast._define(
            ['from_peer'],
            ['actions']
        )

    @tatsumasu()
    def _export_peers_(self):  # noqa

        def block0():
            self._token('to')
            self._peering_selection_()
            self.name_last_node('to_peer')
            with self._optional():
                self._token('action')
                self._action_list_()
                self.add_last_node_to_name('actions')
        self._positive_closure(block0)
        self.ast._define(
            ['to_peer'],
            ['actions']
        )

    @tatsumasu()
    def _peering_selection_(self):  # noqa
        self._peering_()
        self.name_last_node('peer')
        with self._optional():
            self._routers_()
            self.name_last_node('router')
        with self._optional():
            self._token('EXCEPT')
            self._peering_()
            self.name_last_node('except_')
        self.ast._define(
            ['except_', 'peer', 'router'],
            []
        )

    @tatsumasu()
    def _routers_(self):  # noqa
        with self._choice():
            with self._option():
                self._rtr_()
                self.name_last_node('peer_router')
                self._token('at')
                self._rtr_()
                self.name_last_node('local_router')
            with self._option():
                self._rtr_()
                self.name_last_node('peer_router')
            with self._option():
                self._token('at')
                self._rtr_()
                self.name_last_node('local_router')
            self._error('no available options')
        self.ast._define(
            ['local_router', 'peer_router'],
            []
        )

    @tatsumasu()
    def _rtr_(self):  # noqa
        with self._choice():
            with self._option():
                self._ipv4_addr_()
            with self._option():
                self._ipv6_addr_()
            self._error('no available options')

    @tatsumasu()
    def _action_list_(self):  # noqa

        def block0():
            self._action_()
            self.name_last_node('@')
            self._token(';')
        self._closure(block0)

    @tatsumasu()
    def _action_(self):  # noqa
        with self._choice():
            with self._option():
                self._action_pref_()
                self.name_last_node('@')
            with self._option():
                self._action_med_()
                self.name_last_node('@')
            with self._option():
                self._action_dpa_()
                self.name_last_node('@')
            with self._option():
                self._action_aspath_()
                self.name_last_node('@')
            with self._option():
                self._action_community_()
                self.name_last_node('@')
            self._error('no available options')

    @tatsumasu()
    def _val_int_(self):  # noqa
        self._pattern(r'[0-9]+')

    @tatsumasu()
    def _action_pref_(self):  # noqa
        self._token('pref')
        self.name_last_node('attr')
        self._token('=')
        self.name_last_node('op')
        self._val_int_()
        self.name_last_node('value')
        self.ast._define(
            ['attr', 'op', 'value'],
            []
        )

    @tatsumasu()
    def _action_med_(self):  # noqa
        self._token('med')
        self.name_last_node('attr')
        self._token('=')
        self.name_last_node('op')
        self._val_int_()
        self.name_last_node('value')
        self.ast._define(
            ['attr', 'op', 'value'],
            []
        )

    @tatsumasu()
    def _action_dpa_(self):  # noqa
        self._token('dps')
        self.name_last_node('attr')
        self._token('=')
        self.name_last_node('op')
        self._val_int_()
        self.name_last_node('value')
        self.ast._define(
            ['attr', 'op', 'value'],
            []
        )

    @tatsumasu()
    def _action_aspath_(self):  # noqa
        self._token('aspath')
        self.name_last_node('attr')
        self._token('.prepend')
        self.name_last_node('op')

        def sep3():
            self._token(',')

        def block3():
            self._val_int_()
        self._gather(block3, sep3)
        self.name_last_node('value')
        self.ast._define(
            ['attr', 'op', 'value'],
            []
        )

    @tatsumasu()
    def _bgp_community_(self):  # noqa
        self._pattern(r'[0-9]+(:[0-9]+)?')

    @tatsumasu()
    def _action_community_(self):  # noqa
        self._token('community')
        self.name_last_node('attr')
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('=')
                with self._option():
                    self._token('.=')
                with self._option():
                    self._token('.delete')
                with self._option():
                    self._token('.contains')
                self._error('no available options')
        self.name_last_node('op')
        self._token('{')

        def sep4():
            self._token(',')

        def block4():
            with self._choice():
                with self._option():
                    self._bgp_community_()
                with self._option():
                    self._token('no_export')
                with self._option():
                    self._token('no_advertise')
                self._error('no available options')
        self._gather(block4, sep4)
        self.name_last_node('value')
        self._token('}')
        self.ast._define(
            ['attr', 'op', 'value'],
            []
        )


class RPSLViaSemantics(object):
    def afi(self, ast):  # noqa
        return ast

    def afi_list(self, ast):  # noqa
        return ast

    def regex_ASN(self, ast):  # noqa
        return ast

    def regex_AS_SET(self, ast):  # noqa
        return ast

    def asn(self, ast):  # noqa
        return ast

    def as_set(self, ast):  # noqa
        return ast

    def peering(self, ast):  # noqa
        return ast

    def filter(self, ast):  # noqa
        return ast

    def regex_ipv4_addr(self, ast):  # noqa
        return ast

    def regex_ipv6_addr(self, ast):  # noqa
        return ast

    def ipv4_addr(self, ast):  # noqa
        return ast

    def ipv6_addr(self, ast):  # noqa
        return ast

    def start(self, ast):  # noqa
        return ast

    def attr_import_via(self, ast):  # noqa
        return ast

    def attr_export_via(self, ast):  # noqa
        return ast

    def rule_import(self, ast):  # noqa
        return ast

    def rule_export(self, ast):  # noqa
        return ast

    def via(self, ast):  # noqa
        return ast

    def import_peers(self, ast):  # noqa
        return ast

    def export_peers(self, ast):  # noqa
        return ast

    def peering_selection(self, ast):  # noqa
        return ast

    def routers(self, ast):  # noqa
        return ast

    def rtr(self, ast):  # noqa
        return ast

    def action_list(self, ast):  # noqa
        return ast

    def action(self, ast):  # noqa
        return ast

    def val_int(self, ast):  # noqa
        return ast

    def action_pref(self, ast):  # noqa
        return ast

    def action_med(self, ast):  # noqa
        return ast

    def action_dpa(self, ast):  # noqa
        return ast

    def action_aspath(self, ast):  # noqa
        return ast

    def bgp_community(self, ast):  # noqa
        return ast

    def action_community(self, ast):  # noqa
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = RPSLViaParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, RPSLViaParser, name='RPSLVia')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
