#!/bin/bash

set -e
set -o pipefail

function on_exit() {
	# ding ding ding ding
	echo -ne '\007' ; sleep 0.1 ; echo -ne '\007' ; sleep 0.1 ; echo -ne '\007' ; sleep 0.1 ; echo -ne '\007' ; sleep 0.1 ;
}
trap on_exit EXIT

if [ ! -e "setup.py" ]; then
	echo "The script must be executed from within the repository's root directory."
	exit
fi

export PYTHONPATH="`pwd`"
ROOT="`pwd`"

TESTS_DIR="`pwd`/tests"
LAST_RESULTS_DIR="$TESTS_DIR/last_results"

BGPSPEAKERS="bird openbgpd60 openbgpd62"

if [ -d "$LAST_RESULTS_DIR" -a -z "$1" ]; then
	echo "Last results directory already existing: please check and then remove it - rmdir $LAST_RESULTS_DIR"
	exit
fi

function join_last_results() {
	if [ ! -e $LAST_RESULTS_DIR/static.last ]; then
		echo "ERROR: static.last missing"
		exit 1
	fi
	cat $LAST_RESULTS_DIR/static.last > $TESTS_DIR/last

	for bgpspeaker in $BGPSPEAKERS; do
		for d in $TESTS_DIR/live_tests/scenarios/*; do
			if [ -d $d ]; then
				if [[ `find $d/test_${bgpspeaker}*.py 2>/dev/null | wc -l` -gt 0 ]]; then
					TARGET_FILE="live_`basename $d`_${bgpspeaker}.last"
					if [ ! -e $LAST_RESULTS_DIR/$TARGET_FILE ]; then
						echo "ERROR: $TARGET_FILE missing"
						exit 1
					fi
					cat $LAST_RESULTS_DIR/$TARGET_FILE >> $TESTS_DIR/last
				fi
			fi
		done
	done

	rm $LAST_RESULTS_DIR/*.last
	rmdir $LAST_RESULTS_DIR
}

if [ "$1" == "join_only" ]; then
	join_last_results
	exit
fi

if [ -n "$2" ]; then
	BGPSPEAKERS="$2"
fi

# Check for codetags
echo "Verifying codetags..."
set +e
egrep -r "#XXX|#FIXME|#BUG" pierky/ templates/ scripts/ config.d/ docs/ examples/
if [ $? -eq 0 ]; then
	echo "One ore more codetags found."
	exit
fi
set -e

# At first verify if templates and fingerprints are aligned.
echo "Verifying if templates and fingerprints are aligned..."
nosetests -vs -x tests/static/test_cfg_program.py 2>&1

# Then check the code
echo "Checking code via tox..."
tox -e py34-syntax,py27-flake8,py34-flake8 2>&1

echo "Verifying no Docker instances are running..."
if [ "`docker ps | wc -l`" != "1" ]; then
	echo "One or more Docker instances are already running"
	exit
fi

echo "Verifying no VMs are running..."
if [ "`virsh list --name --state-running | wc -w`" != "0" ]; then
	echo "One or more VMs are already running"
	exit
fi

if [ ! -d $LAST_RESULTS_DIR ]; then
	mkdir -p $LAST_RESULTS_DIR
fi

if [[ -z "$1" || `echo "$1" | grep -P "\bcli\b"` ]]; then
	echo -n "Testing CLI commands... "
	./tests/cli 2>&1
fi

if [[ -z "$1" || `echo "$1" | grep -P "\bstatic\b"` ]]; then
	echo "Running static tests..."
	nosetests -vs -x $TESTS_DIR/static 2>&1 | tee $LAST_RESULTS_DIR/static.last
fi

echo "Testing live scenarios with BUILD_ONLY=1..."
if [[ -z "$1" || `echo "$1" | grep -P "\bbuild_only\b"` ]]; then
	BUILD_ONLY=1 nosetests -vs -x $TESTS_DIR/live_tests/scenarios/*/test_*.py -m test_010_setup
fi

echo "Running live tests..."
for bgpspeaker in $BGPSPEAKERS; do
	for d in $TESTS_DIR/live_tests/scenarios/*; do
		if [ -d $d ]; then
			LIVE_TEST_NAME="`basename $d`"

			if [[ -z "$1" || `echo "$1" | grep -P "\b$LIVE_TEST_NAME\b"` ]]; then
				if [[ `find $d/test_${bgpspeaker}*.py 2>/dev/null | wc -l` -gt 0 ]]; then
					echo " - live test: $LIVE_TEST_NAME, $bgpspeaker"
					TARGET_FILE="live_${LIVE_TEST_NAME}_${bgpspeaker}.last"
					nosetests -vs -x $d/test_${bgpspeaker}*.py 2>&1 | tee $LAST_RESULTS_DIR/$TARGET_FILE
				fi
			fi
		fi
	done
done

join_last_results
