#!/bin/bash

set -e

if [ ! -e "setup.py" ]; then
	echo "The script must be executed from within the repository's root directory."
	exit
fi

export PYTHONPATH="`pwd`"
ROOT="`pwd`"

DOCS_DIR="`pwd`/docs"
CFG_FILE="var/build_doc.yml"

function publish_docs() {
	echo "Publishing docs via HTTP"

	echo "cd $DOCS_DIR ; make html ; cd _build/html/ ; python -m SimpleHTTPServer 8000 ; cd $ROOT"
	cd $DOCS_DIR
	make html
	cd _build/html/
	python -m SimpleHTTPServer 8000
	cd $ROOT
}

if [ "$1" == "publish" ]; then
	publish_docs
	exit
fi

# ----------------------------------------------------

echo "Rendering GENERAL.rst from config.d/general.yml"
./utils/make_general.py

echo "Generating examples configurations"

function RenderExample() {
	DST="$1" ; shift
	COMMAND="$1" ; shift
	GENERAL="$1" ; shift
	CLIENTS="$1" ; shift
	BOGONS="$1" ; shift

	CMD="./scripts/arouteserver $COMMAND --cfg $CFG_FILE --general $GENERAL --clients $CLIENTS --bogons $BOGONS"

	if [ "$COMMAND" == "bird" ]; then
		IP_VER="$1" ; shift
		$CMD --ip-ver $IP_VER -o examples/$DST/bird$IP_VER.conf $@
	elif [ "$COMMAND" == "openbgpd" ]; then
		$CMD -o examples/$DST/openbgpd.conf --ignore-issues \* --target-version 6.2
	elif [ "$COMMAND" == "html" ]; then
		$CMD -o examples/$DST/description.html
		cp examples/$DST/description.html $DOCS_DIR/_static/examples_$DST.html
	elif [ "$COMMAND" == "template-context" ]; then
		if [ "$#" -gt 0 ]; then
			IP_VER="$1" ; shift
			IP_VER_OPT="--ip-ver $IP_VER"
		else
			IP_VER=""
			IP_VER_OPT=""
		fi
		$CMD $IP_VER_OPT -o examples/$DST/template-context$IP_VER
	else
		echo "Command unknown: $COMMAND"
	fi
}

function RenderConfigureExample() {
	DST="$1"; shift
	ANSWERS="$1"; shift
	CMD="./scripts/arouteserver configure --cfg $CFG_FILE --output examples/auto-config/${DST} --preset-answer $ANSWERS"

	[[ -e examples/auto-config/${DST} ]] && rm examples/auto-config/${DST}
	$CMD &>/dev/null

	CMD="./scripts/arouteserver html --cfg $CFG_FILE --output examples/auto-config/${DST}.html --general examples/auto-config/${DST}"

	$CMD

	cp examples/auto-config/${DST}.html $DOCS_DIR/_static/examples_auto-config_${DST}.html
}

function ClientsFromEuroIX() {
	URL="$1"; shift
	IXP_ID="$1"; shift
	OUTPUT_FILE="$1"; shift
	VLAN_ID="$1"; shift
	CMD="./scripts/arouteserver clients-from-euroix --cfg $CFG_FILE --url $URL $IXP_ID -o $OUTPUT_FILE"
	if [ -n "$VLAN_ID" ]; then
		CMD="$CMD --vlan $VLAN_ID"
	fi

	$CMD

	./scripts/arouteserver bird --cfg $CFG_FILE --test-only --general "config.d/general.yml" --clients $OUTPUT_FILE --bogons "config.d/bogons.yml" --ip-ver 4
	./scripts/arouteserver bird --cfg $CFG_FILE --test-only --general "config.d/general.yml" --clients $OUTPUT_FILE --bogons "config.d/bogons.yml" --ip-ver 6
}

echo "Building example: configure command output"
RenderConfigureExample "bird-general.yml" "daemon=bird asn=64496 router_id=192.0.2.1 black_list=192.0.2.0/24,2001:db8::/32"
RenderConfigureExample "openbgpd62-general.yml" "daemon=openbgpd version=6.2 asn=64496 router_id=192.0.2.1 black_list=192.0.2.0/24,2001:db8::/32"

# Clear cache for the ASNs involved in the example clients.yml file
# because the suggested config built using the 'configure' command
# uses the allow_longer_prefixes option while the default value used
# by the distributed config does not.
find var/cache/ -name AS3333-* -delete
find var/cache/ -name AS10745-* -delete

echo "Building example: default, BIRD, IPv4"
G="config.d/general.yml"
C="config.d/clients.yml"
RenderExample "default" "bird" "$G" "$C" "config.d/bogons.yml" 4
RenderExample "default" "template-context" "$G" "$C" "config.d/bogons.yml" 4

echo "Building example: default, BIRD, IPv6"
RenderExample "default" "bird" "$G" "$C" "config.d/bogons.yml" 6
RenderExample "default" "template-context" "$G" "$C" "config.d/bogons.yml" 6

echo "Building example: default, OpenBGPD, IPv4 + IPv6"
RenderExample "default" "openbgpd" "$G" "$C" "config.d/bogons.yml"
RenderExample "default" "template-context" "$G" "$C" "config.d/bogons.yml"

echo "Building example: default, HTML"
RenderExample "default" "html" "$G" "$C" "config.d/bogons.yml"

echo "Building example: rich, BIRD, IPv4"
G="examples/rich/general.yml"
C="examples/rich/clients.yml"
RenderExample "rich" "bird" "$G" "$C" "config.d/bogons.yml" 4 --use-local-files client
RenderExample "rich" "template-context" "$G" "$C" "config.d/bogons.yml" 4

echo "Building example: rich, BIRD, IPv6"
RenderExample "rich" "bird" "$G" "$C" "config.d/bogons.yml" 6
RenderExample "rich" "template-context" "$G" "$C" "config.d/bogons.yml" 6

echo "Building example: rich, OpenBGPD, IPv4 + IPv6"
RenderExample "rich" "openbgpd" "$G" "$C" "config.d/bogons.yml"
RenderExample "rich" "template-context" "$G" "$C" "config.d/bogons.yml"

echo "Building example: rich, HTML"
RenderExample "rich" "html" "$G" "$C" "config.d/bogons.yml"

echo "Building example: BIRD hooks"
G="examples/bird_hooks/general.yml"
C="examples/bird_hooks/clients.yml"
HOOKS="pre_receive_from_client post_receive_from_client pre_announce_to_client post_announce_to_client scrub_communities_in scrub_communities_out apply_blackhole_filtering_policy route_can_be_announced_to announce_rpki_invalid_to_client"
RenderExample "bird_hooks" "bird" "$G" "$C" "config.d/bogons.yml" 4 --use-hooks $HOOKS --use-local-files header
RenderExample "bird_hooks" "bird" "$G" "$C" "config.d/bogons.yml" 6 --use-hooks $HOOKS --use-local-files header

echo "Build clients from Euro-IX files? [yes/NO] "
read YES_NO

if [ "$YES_NO" == "yes" ]; then
	ClientsFromEuroIX "https://my.ams-ix.net/api/v1/members.json" 2 "examples/clients-from-euroix/amsix.yml" 502
	ClientsFromEuroIX "https://www.inex.ie/ixp/apiv1/member-list/list" 1 "examples/clients-from-euroix/inex.yml" 2
fi

# ----------------------------------------------------

echo "Building Live tests scenarios TOC"
DST_FILE="$DOCS_DIR/LIVETESTS_SCENARIOS.rst"
rm $DOCS_DIR/LIVETESTS_SCENARIOS_*.rst

echo ".. DO NOT EDIT: this file is automatically created by /utils/build_doc" > $DST_FILE
echo "" >> $DST_FILE
echo ".. toctree::" >> $DST_FILE
echo "   :maxdepth: 1" >> $DST_FILE
echo "" >> $DST_FILE

cd tests/live_tests/scenarios/
for d in */; do
	SCENARIO_NAME=`basename $d`
	if [ -e "$SCENARIO_NAME/README.rst" ]; then
		echo ".. include:: ../tests/live_tests/scenarios/$SCENARIO_NAME/README.rst" > $DOCS_DIR/LIVETESTS_SCENARIOS_$SCENARIO_NAME.rst
		echo "   LIVETESTS_SCENARIOS_$SCENARIO_NAME" >> $DST_FILE
	fi
done

cd $ROOT

# ----------------------------------------------------

echo "Building HTML description for real tests configuration"
TMP_CLIENTS_FILE="`mktemp`"
cat > $TMP_CLIENTS_FILE << EOF
clients:
  - asn: 1
    ip: 1.1.1.1
EOF

./scripts/arouteserver html --cfg tests/real/arouteserver.yml --clients $TMP_CLIENTS_FILE -o tests/real/general.html
cp tests/real/general.html $DOCS_DIR/_static/tests_real_general.html
cp tests/real/last $DOCS_DIR/_static/tests_real_results.last
rm $TMP_CLIENTS_FILE

DST_FILE="$DOCS_DIR/REALTESTS.rst"

echo ".. DO NOT EDIT: this file is automatically created by /utils/build_doc" > $DST_FILE
echo "" >> $DST_FILE
cat tests/real/README.rst >> $DST_FILE
echo "They are also reported below." >> $DST_FILE
echo "" >> $DST_FILE
echo ".. literalinclude:: _static/tests_real_results.last" >> $DST_FILE

cd $ROOT

# ----------------------------------------------------

echo "Building examples"
DST_FILE="$DOCS_DIR/EXAMPLES.rst"
rm $DST_FILE

echo ".. DO NOT EDIT: this file is automatically created by /utils/build_doc" > $DST_FILE
echo "" >> $DST_FILE
echo "Examples of configurations" >> $DST_FILE
echo "==========================" >> $DST_FILE

cd examples
for d in default rich bird_hooks clients-from-euroix auto-config; do
	EXAMPLE_NAME="$d"
	if [ -e "$EXAMPLE_NAME/README.rst" ]; then
		echo "" >> $DST_FILE
		cat $d/README.rst >> $DST_FILE
		echo "" >> $DST_FILE
		echo "https://github.com/pierky/arouteserver/blob/master/examples/$EXAMPLE_NAME" >> $DST_FILE

		set +e
		html_cnt=`ls $d/*.html 2>/dev/null | wc -l`
		set -e
		if [ $html_cnt -eq 1 ]; then
			echo "" >> $DST_FILE
			echo "See the \`textual representation of this configuration <_static/examples_$EXAMPLE_NAME.html>\`__." >> $DST_FILE
		elif [ $html_cnt -gt 1 ]; then
			for f in `ls $d/*.html`; do
				filename=`basename $f`
				echo "" >> $DST_FILE
				echo "$filename - See the \`textual representation of this configuration <_static/examples_${EXAMPLE_NAME}_${filename}>\`__." >> $DST_FILE
			done
		fi
	fi
done

cd $ROOT

# ----------------------------------------------------

echo "Building README.rst"
DST_FILE="README.rst"

echo ".. DO NOT EDIT: this file is automatically created by /utils/build_doc" > $DST_FILE
echo "" >> $DST_FILE
cat $DOCS_DIR/README_header.txt >> $DST_FILE
cat $DOCS_DIR/FEATURES.rst >> $DST_FILE
cat $DOCS_DIR/README_fulldocs.txt >> $DST_FILE
cat $DOCS_DIR/STATUS.txt >> $DST_FILE
cat $DOCS_DIR/README_footer.txt >> $DST_FILE

# ----------------------------------------------------

publish_docs
